using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using ZohoBooks4Net.Domain.Enumeration.CreditNotes;

namespace ZohoBooks4Net.Filters
{
    public class CreditNotesFilter : PaginationFilter
    {
        /// <summary>
        /// Unique ID of the credit note generated by the server.
        /// </summary>
        public string CreditNoteNumber { get; set; }

        /// <summary>
        /// The date on which credit note is raised. Format [yyyy-mm-dd]
        /// </summary>
        public DateTime? Date { get; set; }

        /// <summary>
        /// Status of the credit note. This can be open, closed or void.
        /// </summary>
        public CreditNoteStatus? Status { get; set; }

        /// <summary>
        /// Total credits raised in this credit note.
        /// </summary>
        public double? Total { get; set; }

        /// <summary>
        /// Reference number generated for the payment. A string of your choice can also be used as the reference number. Max-Length [100]
        /// </summary>
        public string ReferenceNumber { get; set; }

        /// <summary>
        /// Name of the customer to whom the credit note is raised. Max-Length [100]
        /// </summary>
        public string CustomerName { get; set; }

        /// <summary>
        /// Search credit notes by item name. Max_length [100].
        /// </summary>
        public string ItemName { get; set; }

        /// <summary>
        /// Customer ID of the customer for whom the credit note is raised.
        /// </summary>
        public string CustomerId { get; set; }

        /// <summary>
        /// Description for the item.Variants item_description_startswith and item_description_contains. Max-length [100]
        /// </summary>
        public string ItemDescription { get; set; }

        /// <summary>
        /// Unique string generated for the item to which a refund is to be made.
        /// </summary>
        public string ItemId { get; set; }

        /// <summary>
        /// Search credit notes by credit note line item id.
        /// </summary>
        public string LineItemId { get; set; }

        /// <summary>
        /// Unique to denote the tax associate dto the creditnote
        /// </summary>
        public string TaxId { get; set; }

        /// <summary>
        /// Search credit notes by credit note number or customer name or credit note reference number. Max-length [100]
        /// </summary>
        public string SearchText { get; set; }

        /// <summary>
        /// Filter credit notes by statuses. Allowed values Status.All Status.Open Status.Draft Status.Closed and Status.Void
        /// </summary>
        public CreditNotesFilterBy? FilterBy { get; set; }

        /// <summary>
        /// Sort credit notes by following columns customer_name, creditnote_number, balance, total, date and created_time. Allowed Values 
        /// customer_name creditnote_number balance total date and created_time
        /// </summary>
        public CreditNotesSortColumn? SortColumn { get; set; }

        public override void AddFilter(HttpRequestMessage message)
        {
            var filters = new Dictionary<string, string>();

            if (CreditNoteNumber != null)
            {
                filters.Add("creditnote_number", CreditNoteNumber);
            }

            if (Date != null)
            {
                filters.Add("date", Date.Value.ToString());
            }

            if (Status != null)
            {
                filters.Add("status", JsonConvert.SerializeObject(Status).Replace("\"", ""));
            }

            if (Total != null)
            {
                filters.Add("total", Total.Value.ToString());
            }

            if (ReferenceNumber != null)
            {
                filters.Add("reference_number", ReferenceNumber);
            }

            if (CustomerName != null)
            {
                filters.Add("customer_name", CustomerName);
            }

            if (ItemName != null)
            {
                filters.Add("item_name", ItemName);
            }

            if (CustomerId != null)
            {
                filters.Add("customer_id", CustomerId);
            }

            if (ItemDescription != null)
            {
                filters.Add("item_description", ItemDescription);
            }

            if (LineItemId != null)
            {
                filters.Add("line_item_id", LineItemId);
            }

            if (TaxId != null)
            {
                filters.Add("tax_id", TaxId);
            }

            if (FilterBy != null)
            {
                filters.Add("filter_by", JsonConvert.SerializeObject(FilterBy.Value).Replace("\"", ""));
            }

            if (SearchText != null)
            {
                filters.Add("search_text", SearchText);
            }

            if (SortColumn != null)
            {
                filters.Add("sort_column", JsonConvert.SerializeObject(SortColumn.Value).Replace("\"", ""));
            }

            base.AddFilter(message, filters);
        }
    }
}
